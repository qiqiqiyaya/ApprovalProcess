// <auto-generated />
using Ap.Repository.EfSqlserver;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Ap.Repository.EfSqlserver.Migrations
{
    [DbContext(typeof(ApDbContext))]
    partial class ApDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Ap.Core.Share.Entities.ExecutableActionEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Ap_ExecutableAction", (string)null);
                });

            modelBuilder.Entity("Ap.Core.Share.Entities.StateMachineEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CurrentState")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("InitialState")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Ap_StateMachine", (string)null);
                });

            modelBuilder.Entity("Ap.Core.Share.Entities.StateSettingsActionEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ExecutableActionId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("StateSettingsId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("StateSettingsId");

                    b.ToTable("Ap_StateSettingsAction", (string)null);
                });

            modelBuilder.Entity("Ap.Core.Share.Entities.StateSettingsEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StateMachineId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("StateMachineId");

                    b.ToTable("Ap_StateSettings", (string)null);
                });

            modelBuilder.Entity("Ap.Core.Share.Entities.TransitionEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DtState")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StateSettingsId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Trigger")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("StateSettingsId");

                    b.ToTable("Ap_Transition", (string)null);
                });

            modelBuilder.Entity("Ap.Core.Share.Entities.StateSettingsActionEntity", b =>
                {
                    b.HasOne("Ap.Core.Share.Entities.StateSettingsEntity", "StateSettings")
                        .WithMany("Actions")
                        .HasForeignKey("StateSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StateSettings");
                });

            modelBuilder.Entity("Ap.Core.Share.Entities.StateSettingsEntity", b =>
                {
                    b.HasOne("Ap.Core.Share.Entities.StateMachineEntity", "StateMachine")
                        .WithMany("StateSettings")
                        .HasForeignKey("StateMachineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StateMachine");
                });

            modelBuilder.Entity("Ap.Core.Share.Entities.TransitionEntity", b =>
                {
                    b.HasOne("Ap.Core.Share.Entities.StateSettingsEntity", "StateSettings")
                        .WithMany("Transitions")
                        .HasForeignKey("StateSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StateSettings");
                });

            modelBuilder.Entity("Ap.Core.Share.Entities.StateMachineEntity", b =>
                {
                    b.Navigation("StateSettings");
                });

            modelBuilder.Entity("Ap.Core.Share.Entities.StateSettingsEntity", b =>
                {
                    b.Navigation("Actions");

                    b.Navigation("Transitions");
                });
#pragma warning restore 612, 618
        }
    }
}
